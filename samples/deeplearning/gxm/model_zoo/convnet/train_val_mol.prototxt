###############################################################################
# Copyright (c) Intel Corporation - All rights reserved.                      #
# This file is part of the LIBXSMM library.                                   #
#                                                                             #
# For information on the license, see the LICENSE file.                       #
# Further information: https://github.com/libxsmm/libxsmm/                    #
# SPDX-License-Identifier: BSD-3-Clause                                       #
###############################################################################
# Sasikanth Avancha, Dhiraj Kalamkar, Alexander Heinecke (Intel Corp.)
###############################################################################

name: "ConvNet"
node {
  name: "data"
  type: "LMDBData"
  top: "data"
  top: "label"
  propagate_down: false
  mode: TRAIN
  data_param {
    train_source: "examples/imagenet/ilsvrc12_train_lmdb"
    test_source: "examples/imagenet/ilsvrc12_val_lmdb"
    split_db: true
    batch_size: 256
    num_train_files: 1281167
    num_test_files: 50000
    lookahead: 1

  # mean pixel / channel-wise mean instead of mean image
    image_xform_param {
      orig_size: 256
      crop_image: true
      crop_size: 227
      #mean_values: 118.380948
      mean_values: 104
      mean_values: 117
      mean_values: 123
      scale_values: 0.01615589
      mirror: true
    }  
  }
}
node {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  propagate_down: false
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    engine: MKL
    num_output: 64
    kernel_size: 11
    stride: 4
    weight_filler {
        type: "XAVIER"
    }
    bias_filler {
        type: "constant"
	value: 0.1
    }
  }
}
node {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "relu1"
  relu_param {
    engine: MKL
  }
}
node {
  name: "pool1"
  type: "Pooling"
  bottom: "relu1"
  top: "pool1"
  pooling_param {
    engine: MKL
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    engine: MKL
    num_output: 192
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "relu2"
  relu_param {
    engine: MKL
  }
}
node {
  name: "pool2"
  type: "Pooling"
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    engine: MKL
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    engine: MKL
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "relu3"
  relu_param {
    engine: MKL
  }
}
node {
  name: "conv4"
  type: "Convolution"
  bottom: "relu3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    engine: MKL
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "relu4"
  relu_param {
    engine: MKL
  }
}
node {
  name: "conv5"
  type: "Convolution"
  bottom: "relu4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    engine: MKL
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "relu5"
  relu_param {
    engine: MKL
  }
}
node {
  name: "pool5"
  type: "Pooling"
  bottom: "relu5"
  top: "pool5"
  pooling_param {
    engine: MKL
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "fc6"
  type: "FullyConnected"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  fc_param {
    engine: BLAS
    num_output: 4096
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "relu6"
  relu_param {
    engine: LOOP
  }
}
node {
  name: "drop6"
  type: "Dropout"
  bottom: "relu6"
  top: "dropout6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
node {
  name: "fc7"
  type: "FullyConnected"
  bottom: "dropout6"
#  bottom: "relu6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  fc_param {
    engine: BLAS
    num_output: 4096
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "relu7"
  relu_param {
    engine: LOOP
  }
}
node {
  name: "drop7"
  type: "Dropout"
  bottom: "relu7"
  top: "dropout7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
node {
  name: "fc8"
  type: "FullyConnected"
  bottom: "dropout7"
#  bottom: "relu7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  fc_param {
    engine: BLAS
    num_output: 1000
    weight_filler {
      type: "XAVIER"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
node {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  propagate_down: false
  accuracy_param {
    top_k: 5
  }
}
node {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  propagate_down: false
  accuracy_param {
    top_k: 1
  }
}
node {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
  loss_weight: 1
}
