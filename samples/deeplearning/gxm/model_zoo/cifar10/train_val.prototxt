###############################################################################
# Copyright (c) Intel Corporation - All rights reserved.                      #
# This file is part of the LIBXSMM library.                                   #
#                                                                             #
# For information on the license, see the LICENSE file.                       #
# Further information: https://github.com/libxsmm/libxsmm/                    #
# SPDX-License-Identifier: BSD-3-Clause                                       #
###############################################################################
# Sasikanth Avancha, Dhiraj Kalamkar, Alexander Heinecke (Intel Corp.)
###############################################################################

name: "Cifar10"
node {
  name: "data"
  type: "LMDBData"
  top: "data"
  top: "label"
  propagate_down: false
  mode: TRAIN
  data_param {
    train_source: "/lfs/est03_s/cifar10-db/cifar10_train_lmdb"
    test_source: "/lfs/est03_s/cifar10-db/cifar10_test_lmdb"
    batch_size: 100
    num_train_files: 50000
    num_test_files: 10000

    image_xform_param {
      orig_size: 32
      channels: 3
      mean_values: 125.307
      mean_values: 122.95
      mean_values: 113.865
    }
  }
}
node {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  propagate_down: false
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 1
  }
  convolution_param {
    engine: MKL
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "Gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
node {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    engine: MKL
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "relu1"
  relu_param {
    engine: MKL
  }
}
node {
  name: "conv2"
  type: "Convolution"
  bottom: "relu1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 1
  }
  convolution_param {
    engine: MKL
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "Gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
node {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "relu2"
  relu_param {
    engine: MKL
  }
}
node {
  name: "pool2"
  type: "Pooling"
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    engine: MKL
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 1
  }
  convolution_param {
    engine: MKL
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "Gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
node {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "relu3"
  relu_param {
    engine: MKL
  }
}
node {
  name: "pool3"
  type: "Pooling"
  bottom: "relu3"
  top: "pool3"
  pooling_param {
    engine: MKL
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
node {
  name: "ip1"
  type: "FullyConnected"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 1
  }
  fc_param {
    engine: BLAS
    num_output: 64
    weight_filler {
      type: "Gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
node {
  name: "ip2"
  type: "FullyConnected"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 1
  }
  fc_param {
    engine: BLAS
    num_output: 10
    weight_filler {
      type: "Gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
node {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  propagate_down: false
  accuracy_param {
    top_k: 5
  }
}
node {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
  loss_weight: 1
}
