###############################################################################
# Copyright (c) Intel Corporation - All rights reserved.                      #
# This file is part of the LIBXSMM library.                                   #
#                                                                             #
# For information on the license, see the LICENSE file.                       #
# Further information: https://github.com/libxsmm/libxsmm/                    #
# SPDX-License-Identifier: BSD-3-Clause                                       #
###############################################################################
# Sasikanth Avancha, Dhiraj Kalamkar, Alexander Heinecke (Intel Corp.)
###############################################################################

# Graph execution Model (GxM) configuration

CPU_ONLY := 1

# Compiler
CUSTOM_CXX := icpc

USE_OPENCV := 1

# BLAS choice:
# mkl for MKL
#BLAS := openblas
BLAS := mkl

# Use OpenMP
OPENMP := 1

# Architecture
ARCH := avx512_common

# Path to libraries: glog, gflags, protobuf, opencv, lmdb
GXM_LIBRARY_PATH := /swtools/caffe_deps

# Path to libxsmm library for compute
LIBXSMM_PATH := ../../..

BUILD_DIR := build

# Use LMDB; this flag is one always to indicate that the
# only supported db type is LMBD (e.g., not LEVELDB)
LMDB := 1

# Set MLSL flag for multi-node runs; Clear for single-node runs
MLSL := 0

# BF16 support in MLSL
MLSL_WITH_BF16 := 0

# Set to 1 for debugging -- will compile with -O0
# turns on debug prints
DEBUG := 0

# Return without compute to measure overhead of framework
RETURN_NC := 0

# Allocate re-usable memory size in BackPropagation
# Useful for MCDRAM-based CPU
BPOPT_ALLOC := 0

#Turn on NUMA Init; Always on
NUMA_ON := 1

#LIBXSMM Options; to time LIBXSMM layers
XSMM_TIMING := 0

# Fine-grained timing; to time all layers
TIME := 0

# Layer Summaries for debugging
STATS := 0

# Dump activations from each layer for debugging
DUMP_ACT := 0

# Dump weights from relevant layers for debugging
DUMP_WT := 0

# Check canary values between tensors to ensure no overflows
CANCHECK := 0

# Flag to check if first K tensor values have gone to
# NaN or Inf due to bugs in code and stop execution
FP32_BU := 0

