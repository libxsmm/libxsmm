#!/usr/bin/env bash
# shellcheck disable=SC1091

if [ ! "${LIBXSMMROOT}" ]; then
  LIBXSMMROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd -P)
  export LIBXSMMROOT
fi
if [ ! "${ENV_NO_PYTHON}" ] || [ "0" = "${ENV_NO_PYTHON}" ]; then
  if [ "${ENV_PYTHON}" ] && [ "0" != "${ENV_PYTHON}" ]; then
    source /swtools/intel/oneapi/intelpython/latest/env/vars.sh
    ENV_PYTHONBIN=$(command -v python3)
    if [ ! "${ENV_PYTHONBIN}" ]; then
      ENV_PYTHONBIN=$(command -v python)
    fi
    if [ "${ENV_PYTHONBIN}" ]; then
      ENV_PYTHONROOT=$(dirname "${ENV_PYTHONBIN}")/..
      if [ "${ENV_PYTHONROOT}" ] && [ -d "${ENV_PYTHONROOT}/lib" ]; then
        export LD_LIBRARY_PATH=${ENV_PYTHONROOT}/lib:${LD_LIBRARY_PATH}
      fi
      unset ENV_PYTHONROOT
    fi
    if ! [[ ${ENV_PYTHON} =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]]; then
      eval "${ENV_PYTHONBIN} -m pip install --upgrade --user ${ENV_PYTHON} >/dev/null"
    fi
    unset ENV_PYTHONBIN
  fi
  export ENV_NO_PYTHON=1
fi
if [ ! "${MKLROOT}" ]; then
  if [ ! "${ENV_NO_MKL}" ] || [ "0" = "${ENV_NO_MKL}" ]; then
    source /swtools/intel/oneapi/mkl/latest/env/vars.sh
  fi
fi
if [ ! "${ENV_NO_BINUTILS}" ] || [ "0" = "${ENV_NO_BINUTILS}" ]; then
  source /swtools/binutils/enable
  export ENV_NO_BINUTILS=1
fi
if [ ! "${ENV_NO_DATAMASH}" ] || [ "0" = "${ENV_NO_DATAMASH}" ]; then
  source /swtools/datamash/vars.sh
  export ENV_NO_DATAMASH=1
fi
# ensure python3 symlink is found (LIBXSMM's root directory)
if [[ "${PATH}" != *"${LIBXSMMROOT}:"* ]]; then
  export PATH=${LIBXSMMROOT}:${PATH}
fi
# cleanup environment (start over)
unset CXX CC FC OMP INTRINSICS
