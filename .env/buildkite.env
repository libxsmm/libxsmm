#!/usr/bin/env bash
# shellcheck disable=SC2001,SC2153,SC2178

# In case of separate Slurm/Buildkite user, Buildkite's
# build directory can be setup in the following way:
#
#DIR=builds
#rm -rf ${DIR}
#mkdir --mode=u+rwx,g+rws,o=rx ${DIR}
#chown buildkite:buildkite ${DIR}

SED=$(command -v gsed)
# GNU sed is desired (macOS)
if [ ! "${SED}" ]; then
  SED=$(command -v sed)
fi

if [ ! "${HOME_REMOTE}" ] && [ "${LAUNCH_CMD}" ]; then
  HOME_REMOTE=$(${LAUNCH_CMD} "pwd -P")
fi

if [ ! "${REPOROOT}" ]; then
  if [ "${BUILDKITE_ORGANIZATION_SLUG}" ] && \
     [ "${BUILDKITE_PIPELINE_SLUG}" ] && \
     [ "${BUILDKITE_AGENT_NAME}" ] && \
     [ "${HOME_REMOTE}" ];
  then
    NEW_AGENT_NAME=$(echo ${BUILDKITE_AGENT_NAME} | ${SED} "s/\./-/g")
    REPOREMOTE=${HOME_REMOTE}/builds/${NEW_AGENT_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}
    if [ -d "${REPOREMOTE}" ]; then
      REPOROOT=${REPOREMOTE}
    fi
  fi
  if [ ! "${REPOROOT}" ]; then
    END=$(pwd -P)
    if [ "${BASH_SOURCE[0]}" ]; then
      REPOROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)
      DIR=${REPOROOT}
      while [ "${DIR}" != "${END}" ] && [ "/" != "${DIR}" ]; do
        DIR=$(dirname "${DIR}")
      done
      if [ "/" != "${DIR}" ]; then
        REPOROOT=${DIR}
      fi
    else
      REPOROOT=${END}
    fi
  fi
fi

if [ ! "${HOME_REMOTE}" ]; then
  export HOME_REMOTE=${HOME}
else
  export HOME_REMOTE
fi

if [ ! "${REPOREMOTE}" ]; then
  export REPOREMOTE=${REPOROOT}
else
  export REPOREMOTE
fi

if [ ! "${PIPELINE}" ]; then
  export PIPELINE=${BUILDKITE_PIPELINE_SLUG}
fi

if [ ! "${ORGANIZATION}" ]; then
  ORGANIZATION=${BUILDKITE_ORGANIZATION_SLUG}
fi

if [ ! "${BRANCH}" ]; then
  BRANCH=${BUILDKITE_BRANCH}
fi

if [ ! "${JOBID}" ]; then
  JOBID=${BUILDKITE_BUILD_NUMBER}
fi

if [ ! "${STEPNAME}" ]; then
  STEPNAME=${BUILDKITE_LABEL}
fi

if [ ! "${CHECK_USER}" ]; then
  CHECK_USER=buildkite
fi

if [ ! "${ARTIFACT_ROOT}" ]; then
  ARTIFACT_ROOT=${BUILDKITE_BUILD_PATH}/../artifacts
  if [ ! -d "${ARTIFACT_ROOT}" ]; then ARTIFACT_ROOT=/tmp; fi
fi

if [ ! "${LAUNCH_CMD}" ] && [ "$(command -v srun)" ]; then
  if [ ! "${SRUN}" ]; then
    SRUN=$(command -v srun)
  fi
  if [ ! "${LAUNCH_USER}" ]; then
    if [ "${BUILDKITE_BUILD_NUMBER}" ] && \
       [ "$(id -u ${CHECK_USER} 2>/dev/null)" ];
    then
      LAUNCH_USER=${CHECK_USER}
    else
      LAUNCH_USER=${USER}
    fi
  fi
  if [ ! "${PARTITIONS}" ] && [ ! "${PARTITION}" ]; then
    # multiple partitions can be separated by comma
    PARTITIONS="emr"
  fi
fi

if [ ! "${PEDANTIC_HIGH}" ]; then
  export PEDANTIC_HIGH="PEDANTIC=2"
fi
if [ ! "${PEDANTIC_TEST}" ]; then
  export PEDANTIC_TEST="PEDANTIC=1"
fi
if [ ! "${RUN_LINUX_PERF}" ]; then
  export RUN_LINUX_PERF=0
fi
if [ ! "${TESTSIZE}" ]; then
  export TESTSIZE=500
fi
if [ ! "${BLAZE}" ]; then
  export BLAZE=0
fi
if [ ! "${EIGEN}" ]; then
  export EIGEN=0
fi
if [ ! "${COVID}" ]; then
  export COVID=0
fi

if [ ! "${BUILD_USER}" ]; then
  BUILD_USER=${BUILDKITE_BUILD_CREATOR}
fi
if [ ! "${BUILD_USER}" ]; then
  BUILD_USER=${BUILDKITE_BUILD_AUTHOR}
fi
if [ "${BUILD_USER}" ]; then
  read -ra BUILD_USER <<<"${BUILD_USER,,}"
  if [ "1" != "${#BUILD_USER[@]}" ]; then
    BUILD_USER="${BUILD_USER[0]:0:1}${BUILD_USER[-1]}"
  else
    BUILD_USER="${BUILD_USER[0]}"
  fi
fi

if [ ! "${COVERITY_SCAN_USER}" ]; then
  export COVERITY_SCAN_USER=${BUILDKITE_BUILD_CREATOR_EMAIL}
fi
if [ ! "${COVERITY_SCAN_USER}" ]; then
  export COVERITY_SCAN_USER=${BUILDKITE_BUILD_AUTHOR_EMAIL}
fi
if [ ! "${COVERITY_SCAN_BINDIR}" ]; then
  export COVERITY_SCAN_BINDIR="/swtools/coverity/bin"
fi
if [ ! "${COVERITY_SCAN_TMPDIR}" ]; then
  if [ "${CHECK_USER}" ]; then
    export COVERITY_SCAN_TMPDIR="/data/nfs_home/${CHECK_USER}/builds/coverity"
  else
    export COVERITY_SCAN_TMPDIR="cov-int"
  fi
fi
if [ ! "${COVERITY_SCAN_TGZDIR}" ]; then
  export COVERITY_SCAN_TGZDIR="/tmp"
fi

#if [ ! "${TOOL_COMMAND}" ] && [ "${REPOREMOTE}" ]; then
  #export TOOL_COMMAND=${REPOREMOTE}/scripts/tool_inspector.sh
#fi
#if [ "${TOOL_COMMAND}" ] && [ ! "$(command -v "${TOOL_COMMAND}")" ]; then
  #unset TOOL_COMMAND
#fi
#if [ ! "${TOOL_REPORT_ONLY}" ]; then
  #export TOOL_REPORT_ONLY=1
#fi
#if [ ! "${TOOL_ENABLED}" ]; then
  #export TOOL_ENABLED=0
#fi
if [ ! "${TOOL_XFILTER}" ]; then
  export TOOL_XFILTER=libxsmm_xmalloc
fi
if [ ! "${TOOL_FILTER}" ]; then
  export TOOL_FILTER=libxsmm
fi

if [ ! "${LIMITDIR}" ]; then
  export LIMITDIR=${BUILDKITE_BUILD_PATH}
fi
if [ ! "${LIMITRUN}" ]; then
  export LIMITRUN=14399
fi
#if [ ! "${LIMITLOG}" ]; then
  #export LIMITLOG=100
#fi
if [ ! "${UMASK}" ]; then
  export UMASK=0002
fi

artifact_download() {
  local ARTIFACT_DOWNLOAD_PIPELINE=$1
  local ARTIFACT_DOWNLOAD_FILETYPE=$2
  local ARTIFACT_DOWNLOAD_VERBOSE=$3
  local ARTIFACT_DOWNLOAD_COUNT=0
  local ARTIFACT_DOWNLOAD_FILE=""
  if [ "${BUILDKITE_AGENT_ACCESS_TOKEN}" ] && [ "$(command -v curl)" ] && [ "$(command -v sed)" ]; then
    IFS=$'\n'; for LINE in $(curl -s https://graphql.buildkite.com/v1 \
      -H "Authorization: Bearer ${BUILDKITE_AGENT_ACCESS_TOKEN}" \
      -d "{\"query\":\"{pipeline(slug:\\\"intel/${ARTIFACT_DOWNLOAD_PIPELINE}\\\"){builds(first:1){edges{node{jobs(first:1){edges{node{... on JobTypeCommand{artifacts{edges{node{path,downloadURL}}}}}}}}}}}}\"}");
    do
      if [[ "${LINE}" = *"\"path\":"* ]]; then
        ARTIFACT_DOWNLOAD_FILE=$(sed "s/^[[:space:]]*\"path\":[[:space:]]*\"\(..*\)\".*/\1/" <<<"${LINE}")
        if [ "${ARTIFACT_DOWNLOAD_FILE}" ]; then
          if [[ "${ARTIFACT_DOWNLOAD_FILE}" = *".${ARTIFACT_DOWNLOAD_FILETYPE}" ]]; then continue; fi
          ARTIFACT_DOWNLOAD_FILE=""
        fi
      fi
      if [ "${ARTIFACT_DOWNLOAD_FILE}" ]; then
        ARTIFACT_DOWNLOAD_URL=$(sed "s/^[[:space:]]*\"downloadURL\":[[:space:]]*\"\(..*\)\".*/\1/" <<<"${LINE}")
        if [ "${ARTIFACT_DOWNLOAD_URL}" ]; then
          if curl -s "${ARTIFACT_DOWNLOAD_URL}" --output "${ARTIFACT_DOWNLOAD_FILE}"; then
            if [ "${ARTIFACT_DOWNLOAD_VERBOSE}" ] && [ "0" != "${ARTIFACT_DOWNLOAD_VERBOSE}" ]; then
              echo "Downloaded ${ARTIFACT_DOWNLOAD_FILE}."
            fi
            ARTIFACT_DOWNLOAD_COUNT=$((ARTIFACT_DOWNLOAD_COUNT+1))
          fi
        fi
        ARTIFACT_DOWNLOAD_FILE=""
      fi
    done && unset IFS
  fi
  if [ "${ARTIFACT_DOWNLOAD_VERBOSE}" ] && [ "0" != "${ARTIFACT_DOWNLOAD_VERBOSE}" ] && [ "0" = "${ARTIFACT_DOWNLOAD_COUNT}" ]; then
    echo "No artifacts downloaded."
  fi
}
