#!/usr/bin/env bash
###############################################################################
# Copyright (c) Intel Corporation - All rights reserved.                      #
# This file is part of the LIBXSMM library.                                   #
#                                                                             #
# For information on the license, see the LICENSE file.                       #
# Further information: https://github.com/libxsmm/libxsmm/                    #
# SPDX-License-Identifier: BSD-3-Clause                                       #
###############################################################################
# Hans Pabst (Intel Corp.)
###############################################################################

HERE=$(cd "$(dirname $0)"; pwd -P)
if [ "" = "${GIT_DIR}" ]; then
  GIT_DIR=${HERE}/../../.git
fi
REPO=${GIT_DIR}/..

FMTSTYLE=${REPO}/.clang-format
# separate multiple patterns with space
FMTDIRS=${2:-"samples src tests"}
FMTXPAT="/gxm/"
# used by degraded policy
CODEFILE=${REPO}/.codefile
BANNED_CHARS="\t"

GIT=$(command -v git)
TOUCH=$(command -v touch)
SED=$(command -v sed)
RM=$(command -v rm)
if [ "" = "${GIT}" ] || [ "" = "${RM}" ] || \
   [ "" = "${SED}" ] || [ "" = "${TOUCH}" ];
then
  >&2 echo "ERROR: command not found, skipping pre-commit hook!"
  exit 0
fi

# control version-update
LOCKFILE=${GIT_DIR}/.commit
VSCRIPT=${REPO}/scripts/libxsmm_version.sh
if [ -e ${VSCRIPT} ] && [ "" = "$(${GIT} diff --cached --name-only | ${SED} -n '/version.txt/p')" ]; then
  # update version file (since this is a pre-commit hook, shift by one to next version)
  ${VSCRIPT} 1 > version.txt
  # add file and trigger amending the commit
  ${GIT} add version.txt
  ${TOUCH} "${LOCKFILE}-version"
else # cleanup
  ${RM} -f "${LOCKFILE}-version"
fi

GITDIFF="${GIT} diff-index --cached --diff-filter=ACMRTUXB"
FMTBIN=$(command -v clang-format)
ISSUES=0
# set CHECK=0 to enable reformat
CHECK=1
if [ "0" = "${CHECK}" ] && [ "${FMTBIN}" ] && [ -e ${FMTSTYLE} ] && \
   [ "" = "$(${FMTBIN} --style=file -dump-config 2>&1 >/dev/null)" ];
then
  for FILE in $(${GITDIFF} --name-only HEAD); do
    REFORMAT=0
    if [[ ${FILE} = *".c"* ]] || [[ ${FILE} = *".h"* ]]; then
      if [ "" = "${FMTDIRS}" ]; then REFORMAT=1; fi
      for FMTDIR in ${FMTDIRS}; do
        if [[ ${FILE} = "${FMTDIR}/"* ]]; then
          REFORMAT=1; break
        fi
      done
      EXCLUDE=0
      for XPAT in ${FMTXPAT}; do
        if [[ ${FILE} = *"${XPAT}"* ]]; then
          EXCLUDE=1; break
        fi
      done
      if [ "0" != "${EXCLUDE}" ]; then
        REFORMAT=0
      elif [[ (${FILE} = *".c") || (${FILE} = *".h") ]] && \
           [ "$(${SED} -n "s/[[:space:]]\/\//x/p" ${FILE})" ];
      then
        >&2 echo "Issue: ${FILE} has C++ comments."
        ISSUES=$((ISSUES+1))
      fi
    fi
    if [ "0" != "${REFORMAT}" ]; then
      ${FMTBIN} --style=file -i ${FILE}
      # add file and trigger amending the commit
      ${GIT} add ${FILE}
      ${TOUCH} "${LOCKFILE}-format"
    else
      CHECK=1
    fi
  done
elif [ "0" = "${CHECK}" ]; then
  >&2 echo "WARNING: clang-format not found or outdated, proceeding with degraded policy!"
  CHECK=1
fi

# remove or comment the following line to enable degraded policy (do not set CHECK=1)
#CHECK=0
if [ "0" != "${CHECK}" ]; then
  CAT=$(command -v cat)
  WC=$(command -v wc)
  TR=$(command -v tr)
  if [ "${CAT}" ] && [ "${WC}" ] && [ "${TR}" ] && \
     [ "$(${GIT} rev-parse --verify HEAD 2>/dev/null)" ];
  then
    if [ -e ${CODEFILE} ]; then
      # transform wildcard-style patterns to regular expressions
      PATTERNS="$(${SED} -e 's/\./\\./g' -e 's/\*/..*/g' -e 's/?/./g' -e 's/$/\$/g' ${CODEFILE} 2>/dev/null)"
    fi
    IFS_BACKUP="${IFS}"
    IFS=""
    while read -r LINE; do
      IFS="${IFS_BACKUP}"
      # determine the filename of the patch snippet
      MATCH=$(echo "${LINE}" | ${SED} -n "s/^diff --git a\/\(..*\) b..*$/\1/p" 2>/dev/null)
      if [ "${MATCH}" ] && [ -e ${MATCH} ]; then # file must exist i.e., not a deletion
        # check if problem is with a permitted file type
        for PATTERN in ${PATTERNS}; do
          MATCHOK=$(echo "${MATCH}" | ${SED} -n "/${PATTERN}/p" 2>/dev/null)
          if [ "${MATCHOK}" ]; then
            FILE=${MATCHOK}
            break
          fi
        done
      elif [ "${FILE}" ]; then
        # check against banned characters
        MATCH=$(${CAT} -n ${FILE} | ${SED} -n "s/^ *\([0-9][0-9]*\)\t.*[${BANNED_CHARS}]..*$/\1/p" 2>/dev/null)
        if [ "${MATCH}" ]; then
          N=$(echo ${MATCH} | ${WC} -w)
          if [ "1" = "${N}" ]; then # single occurrence
            >&2 echo "Issue: ${FILE}:${MATCH} contains a banned character."
          else # multiple occurrences
            LOCATION=$(echo ${MATCH} | ${TR} " " ",")
            >&2 echo "Issue: ${FILE}:${LOCATION} contains banned characters."
          fi
          ISSUES=$((ISSUES+N))
        fi
        # check against trailing whitespace(s)
        MATCH=$(${CAT} -n ${FILE} | ${SED} -n "s/^ *\([0-9][0-9]*\)\t.*[[:space:]][[:space:]]*$/\1/p" 2>/dev/null)
        if [ "${MATCH}" ]; then
          N=$(echo ${MATCH} | ${WC} -w)
          if [ "1" = "${N}" ]; then # single occurrence
            >&2 echo "Issue: ${FILE}:${MATCH} has a trailing whitespace."
          else # multiple occurrences
            LOCATION=$(echo ${MATCH} | ${TR} " " ",")
            >&2 echo "Issue: ${FILE}:${LOCATION} has trailing spaces."
          fi
          ISSUES=$((ISSUES+N))
        fi
        # checks are finished for this file
        FILE=""
      fi
      IFS=""
    done < <(${GIT} diff-index --cached -p -M HEAD)
    IFS="${IFS_BACKUP}"
  else
    >&2 echo "WARNING: prerequisites not found; skipping pre-commit hook!"
  fi
fi

# reject commit in case of an issue
if [ "0" != "${ISSUES}" ]; then
  if [ "1" = "${ISSUES}" ]; then # single issue
    >&2 echo -n "Error: 1 issue"
  else # multiple issues
    >&2 echo -n "Error: ${ISSUES} issues"
  fi
  >&2 echo " found - consider ./scripts/tool_normalize.sh!"
  exit 1
fi
